{
  "version": 3,
  "sources": ["../../src/observe.ts", "../../src/InView.tsx", "../../src/useInView.tsx"],
  "sourcesContent": ["import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n", "import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n", "import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n\n  React.useEffect(() => {\n    if (!ref && entryTarget && !triggerOnce && !skip) {\n      // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n        entry: undefined,\n      });\n    }\n  }, [ref, entryTarget, triggerOnce, skip, initialInView]);\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],
  "mappings": "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",
  "names": []
}
